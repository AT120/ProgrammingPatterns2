// <auto-generated />
using System;
using CreditApplication.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CreditApplication.Migrations
{
    [DbContext(typeof(CreditDbContext))]
    partial class CreditDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Models.BlockedUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.ToTable("BlockedUsers");
                });

            modelBuilder.Entity("CreditApplication.Models.Credit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreditRateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullMoneyAmount")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MonthPayAmount")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<Guid>("PayingAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("RemainingDebt")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("UnpaidDebt")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreditRateId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("CreditApplication.Models.CreditRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MonthPercent")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CreditRates");
                });

            modelBuilder.Entity("CreditApplication.Models.CreditScore", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.HasKey("UserId");

                    b.ToTable("CreditScore");
                });

            modelBuilder.Entity("CreditApplication.Models.CreditScoreUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Change")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreditScoreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Reason")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreditScoreId");

                    b.ToTable("CreditScoreUpdates");
                });

            modelBuilder.Entity("CreditApplication.Models.Penalty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreditId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPaidOff")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PayoffOperationId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreditId");

                    b.ToTable("Penalties");
                });

            modelBuilder.Entity("CreditApplication.Models.Credit", b =>
                {
                    b.HasOne("CreditApplication.Models.CreditRate", "CreditRate")
                        .WithMany()
                        .HasForeignKey("CreditRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditRate");
                });

            modelBuilder.Entity("CreditApplication.Models.CreditScoreUpdate", b =>
                {
                    b.HasOne("CreditApplication.Models.CreditScore", "CreditScore")
                        .WithMany("ScoreUpdateHistory")
                        .HasForeignKey("CreditScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditScore");
                });

            modelBuilder.Entity("CreditApplication.Models.Penalty", b =>
                {
                    b.HasOne("CreditApplication.Models.Credit", "Credit")
                        .WithMany("Penalties")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credit");
                });

            modelBuilder.Entity("CreditApplication.Models.Credit", b =>
                {
                    b.Navigation("Penalties");
                });

            modelBuilder.Entity("CreditApplication.Models.CreditScore", b =>
                {
                    b.Navigation("ScoreUpdateHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
