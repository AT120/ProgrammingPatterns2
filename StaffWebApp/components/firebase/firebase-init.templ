package firebase

templ InitFirebase() {
	<script type="module">
		if ("serviceWorker" in navigator) {
			try {
			const registration = await navigator.serviceWorker.register("/firebase-messaging-sw.js", {
				scope: "/",
			});
			if (registration.installing) {
				console.log("Service worker installing");
			} else if (registration.waiting) {
				console.log("Service worker installed");
			} else if (registration.active) {
				console.log("Service worker active");
			}
			} catch (error) {
				console.error(`Registration failed with ${error}`);
			}
		};


		import { initializeApp } from "https://www.gstatic.com/firebasejs/10.11.1/firebase-app.js";
		import { getMessaging, getToken, onMessage } from "https://www.gstatic.com/firebasejs/10.11.1/firebase-messaging.js";

		const firebaseConfig = {
			apiKey: "AIzaSyCD-yzykycUz9wXu4Wv9V6LJpD74Pgbaik",
			authDomain: "patterns-959c2.firebaseapp.com",
			projectId: "patterns-959c2",
			storageBucket: "patterns-959c2.appspot.com",
			messagingSenderId: "605380956040",
			appId: "1:605380956040:web:949694ac4f2d05b8d9743d",
			measurementId: "G-KJ7RKYMF56"
		};
	
		const app = initializeApp(firebaseConfig);
		const messaging = getMessaging(app);

		const tokenOpts = {
			vapidKey: 'BKejMViTMJPKUXghjd3wemwMjmgAkRTrkYloifcGYa40yyMDyLY2sDRlsadof05ShYW5Dg2lkQLxBp9IsnFyqQM'
		};
		console.log(tokenOpts)
		getToken(messaging, tokenOpts).then(async (token) => {
			const storedToken = localStorage.getItem("deviceNotificationToken")
			if (storedToken === token) { 
				return
			}
	
			const url = new URL("/api/preferences/notifications", document.location.origin)
			url.searchParams.append('token', token)
			const resp = await fetch(url.toString(), {method: "POST"})
			if (!resp.ok) {
				console.log("failed to subscribe to notifications")
			} else {
				localStorage.setItem("deviceNotificationToken", token)
			}
		})

		onMessage(messaging, (payload) => {
			console.log('Message received. ', payload);
			const toastContainer = document.getElementsByClassName("toast-container")[0];
			let toast = document.getElementsByClassName("notificationToast")[0].cloneNode(true);
			toast = toastContainer.appendChild(toast)
			const titles = toast.getElementsByClassName("title")
			console.log(titles)
			for (const title of titles) {
				title.textContent = payload.notification.title
			};

			const bodies = toast.getElementsByClassName("body")
			for (const body of bodies) {
				body.textContent = payload.notification.body
			};

			const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toast)
			toastBootstrap.show()

			setTimeout(() => {
				toastContainer.removeChild(toast)
			}, 5000)
		});
	</script>

}
